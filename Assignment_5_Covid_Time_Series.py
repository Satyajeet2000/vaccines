"""Assignment05_Updated_MR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HMRY1JBHr25HMBfg4nTBfjWuq_FWLyFd
"""

import pandas as pd
import matplotlib.pyplot as plt

url = "https://raw.githubusercontent.com/ds5010/spring-2022/main/data/merge.csv"
df = pd.read_csv(url, converters={'FIPS' : str})

mayurl = "https://github.com/MatthewjRay/5010_Data/raw/main/Combined_Data_Vacc_Death_5_30_21.csv"
maydf = pd.read_csv(mayurl, converters={'FIPS' : str})

novurl = "https://github.com/MatthewjRay/5010_Data/raw/main/Combined_Data_Vacc_Death_11_30_21.csv"
novdf = pd.read_csv(novurl, converters={'FIPS' : str})

augurl = "https://github.com/MatthewjRay/5010_Data/raw/main/Combined_Data_Vacc_Death_8_30_21.csv"
augdf = pd.read_csv(augurl, converters={'FIPS' : str})

#[MR] Create scatter plot from end of class 
#[MR] Create column in dataframe to get ratio of deaths to total population
#[MR] Plot fully vaccinated 18+ population against deaths per 100,000
df['Deaths_Per_1e5'] = df['Deaths'] / df['Census2019_18PlusPop'] * 1e5
xlabel = 'Series_Complete_18PlusPop_Pct'
ylabel = 'Deaths_Per_1e5'

plt.figure(figsize=(8,8))
scatter = plt.scatter(
    x = df[xlabel], 
    y = df[ylabel], 
    s=df['Census2019_18PlusPop']/10000, # [MR] Plots bubble size based on population. Divided by 2000 to fit on plot area 
    cmap="Accent", 
    alpha=0.5, 
    edgecolors="white", 
    linewidth=2);
plt.title("% Pop 18+ vaccinated vs. Deaths Per 100,000")
ax = plt.gcf().axes[0]
ax.set(xlabel=xlabel, ylabel=ylabel)
plt.ylim(0,500)
plt.xlim(0,)
plt.show()

#[MR] Plot that includes segmented by region based on 4 official regions of U.S. - Census Bureau
#[MR] Create column in dataframe to get ratio of deaths to total population
#[MR] Plot fully vaccinated 18+ population against deaths per 100,000
df['Deaths_Per_1e5'] = df['Deaths'] / df['Census2019_18PlusPop'] * 1e5
xlabel = 'Series_Complete_18PlusPop_Pct'
ylabel = 'Deaths_Per_1e5'
plt.figure(figsize=(8,8))

#[MR] Added color dictionary by region
colors = {'AL':'blue','AK':'gold','AZ':'gold','AR':'blue','CA':'gold','CO':'gold','CT':'red','DE':'blue','DC':'blue','FL':'blue','GA':'blue','HI':'gold','ID':'gold','IL':'green','IN':'green','IA':'green','KS':'green','KY':'blue','LA':'blue','ME':'red','MD':'blue','MA':'red','MI':'green','MN':'green','MS':'blue','MO':'green','MT':'gold','NE':'green','NV':'gold','NH':'red','NJ':'red','NM':'gold','NY':'red','NC':'blue','ND':'green','OH':'green','OK':'blue','OR':'gold','PA':'red','RI':'red','SC':'blue','SD':'green','TN':'blue','TX':'blue','UT':'gold','VT':'red','VA':'blue','WA':'gold','WV':'blue','WI':'green','WY':'gold','PR':'blue'}

#[MR] Added region dictionary to align color legend
regions = {'South':'blue','West':'gold','Northeast':'red','Midwest':'green'}

scatter = plt.scatter(
    x = df[xlabel], 
    y = df[ylabel], 
    s=df['Census2019_18PlusPop']/10000, # [MR] Plots bubble size based on population. Divided by 2000 to fit on plot area
    c=df['Recip_State'].map(colors), 
    cmap="Accent", 
    alpha=0.5, 
    edgecolors="white", 
    linewidth=2);
plt.title("% Pop 18+ vaccinated vs. Deaths Per 100,000 by Region")
ax = plt.gcf().axes[0]
ax.set(xlabel=xlabel, ylabel=ylabel)
plt.ylim(0,500)
plt.xlim(0,)

#[MR] Creates fake line to use index for second legend
markers = [plt.Line2D([0,0],[0,0],color=color, marker='o', linestyle='') for color in regions.values()]
leg = plt.legend(markers, regions.keys(), numpoints=1, loc=(1.01,0), title="Region")
ax.add_artist(leg)

#[MR] Creates population legend
handles, labels = scatter.legend_elements(prop="sizes", alpha=0.4,fmt="{x}K")
plt.legend(handles, labels, loc=(1.01,0.3), title="Population", labelspacing=1.0, borderpad=1)

plt.show()

#[MR] Plot that includes segmented by region based on 4 official regions of U.S. - Census Bureau
#[MR] Create column in dataframe to get ratio of deaths to total population
#[MR] Plot fully vaccinated 18+ population against deaths per 100,000
maydf['Deaths_Per_1e5'] = maydf['Deaths'] / maydf['Census2019_18PlusPop'] * 1e5
xlabel = 'Series_Complete_18PlusPop_Pct'
ylabel = 'Deaths_Per_1e5'
plt.figure(figsize=(8,8))

#[MR] Added color dictionary by region
colors = {'AL':'blue','AK':'gold','AZ':'gold','AR':'blue','CA':'gold','CO':'gold','CT':'red','DE':'blue','DC':'blue','FL':'blue','GA':'blue','HI':'gold','ID':'gold','IL':'green','IN':'green','IA':'green','KS':'green','KY':'blue','LA':'blue','ME':'red','MD':'blue','MA':'red','MI':'green','MN':'green','MS':'blue','MO':'green','MT':'gold','NE':'green','NV':'gold','NH':'red','NJ':'red','NM':'gold','NY':'red','NC':'blue','ND':'green','OH':'green','OK':'blue','OR':'gold','PA':'red','RI':'red','SC':'blue','SD':'green','TN':'blue','TX':'blue','UT':'gold','VT':'red','VA':'blue','WA':'gold','WV':'blue','WI':'green','WY':'gold','PR':'blue'}

#[MR] Added region dictionary to align color legend
regions = {'South':'blue','West':'gold','Northeast':'red','Midwest':'green'}

scatter = plt.scatter(
    x = maydf[xlabel], 
    y = maydf[ylabel], 
    s=maydf['Census2019_18PlusPop']/10000, # [MR] Plots bubble size based on population. Divided by 2000 to fit on plot area
    c=maydf['Recip_State'].map(colors), 
    cmap="Accent", 
    alpha=0.5, 
    edgecolors="white", 
    linewidth=2);
plt.title("% Pop 18+ vaccinated vs. Deaths Per 100,000 by Region (5.30.21)")
ax = plt.gcf().axes[0]
ax.set(xlabel=xlabel, ylabel=ylabel)
plt.ylim(0,500)
plt.xlim(0,)

#[MR] Creates fake line to use index for second legend
markers = [plt.Line2D([0,0],[0,0],color=color, marker='o', linestyle='') for color in regions.values()]
leg = plt.legend(markers, regions.keys(), numpoints=1, loc=(1.01,0), title="Region")
ax.add_artist(leg)

#[MR] Creates population legend
handles, labels = scatter.legend_elements(prop="sizes", alpha=0.4,fmt="{x}K")
plt.legend(handles, labels, loc=(1.01,0.3), title="Population", labelspacing=1.0, borderpad=1)

plt.show()

#[MR] Plot that includes segmented by region based on 4 official regions of U.S. - Census Bureau
#[MR] Create column in dataframe to get ratio of deaths to total population
#[MR] Plot fully vaccinated 18+ population against deaths per 100,000
augdf['Deaths_Per_1e5'] = augdf['Deaths'] / augdf['Census2019_18PlusPop'] * 1e5
xlabel = 'Series_Complete_18PlusPop_Pct'
ylabel = 'Deaths_Per_1e5'
plt.figure(figsize=(8,8))

#[MR] Added color dictionary by region
colors = {'AL':'blue','AK':'gold','AZ':'gold','AR':'blue','CA':'gold','CO':'gold','CT':'red','DE':'blue','DC':'blue','FL':'blue','GA':'blue','HI':'gold','ID':'gold','IL':'green','IN':'green','IA':'green','KS':'green','KY':'blue','LA':'blue','ME':'red','MD':'blue','MA':'red','MI':'green','MN':'green','MS':'blue','MO':'green','MT':'gold','NE':'green','NV':'gold','NH':'red','NJ':'red','NM':'gold','NY':'red','NC':'blue','ND':'green','OH':'green','OK':'blue','OR':'gold','PA':'red','RI':'red','SC':'blue','SD':'green','TN':'blue','TX':'blue','UT':'gold','VT':'red','VA':'blue','WA':'gold','WV':'blue','WI':'green','WY':'gold','PR':'blue'}

#[MR] Added region dictionary to align color legend
regions = {'South':'blue','West':'gold','Northeast':'red','Midwest':'green'}

scatter = plt.scatter(
    x = augdf[xlabel], 
    y = augdf[ylabel], 
    s=augdf['Census2019_18PlusPop']/10000, # [MR] Plots bubble size based on population. Divided by 2000 to fit on plot area
    c=augdf['Recip_State'].map(colors), 
    cmap="Accent", 
    alpha=0.5, 
    edgecolors="white", 
    linewidth=2);
plt.title("% Pop 18+ vaccinated vs. Deaths Per 100,000 by Region (8.30.21)")
ax = plt.gcf().axes[0]
ax.set(xlabel=xlabel, ylabel=ylabel)
plt.ylim(0,500)
plt.xlim(0,)

#[MR] Creates fake line to use index for second legend
markers = [plt.Line2D([0,0],[0,0],color=color, marker='o', linestyle='') for color in regions.values()]
leg = plt.legend(markers, regions.keys(), numpoints=1, loc=(1.01,0), title="Region")
ax.add_artist(leg)

#[MR] Creates population legend
handles, labels = scatter.legend_elements(prop="sizes", alpha=0.4,fmt="{x}K")
plt.legend(handles, labels, loc=(1.01,0.3), title="Population", labelspacing=1.0, borderpad=1)

plt.show()

#[MR] Plot that includes segmented by region based on 4 official regions of U.S. - Census Bureau
#[MR] Create column in dataframe to get ratio of deaths to total population
#[MR] Plot fully vaccinated 18+ population against deaths per 100,000
novdf['Deaths_Per_1e5'] = novdf['Deaths'] / novdf['Census2019_18PlusPop'] * 1e5
xlabel = 'Series_Complete_18PlusPop_Pct'
ylabel = 'Deaths_Per_1e5'
plt.figure(figsize=(8,8))

#[MR] Added color dictionary by region
colors = {'AL':'blue','AK':'gold','AZ':'gold','AR':'blue','CA':'gold','CO':'gold','CT':'red','DE':'blue','DC':'blue','FL':'blue','GA':'blue','HI':'gold','ID':'gold','IL':'green','IN':'green','IA':'green','KS':'green','KY':'blue','LA':'blue','ME':'red','MD':'blue','MA':'red','MI':'green','MN':'green','MS':'blue','MO':'green','MT':'gold','NE':'green','NV':'gold','NH':'red','NJ':'red','NM':'gold','NY':'red','NC':'blue','ND':'green','OH':'green','OK':'blue','OR':'gold','PA':'red','RI':'red','SC':'blue','SD':'green','TN':'blue','TX':'blue','UT':'gold','VT':'red','VA':'blue','WA':'gold','WV':'blue','WI':'green','WY':'gold','PR':'blue'}

#[MR] Added region dictionary to align color legend
regions = {'South':'blue','West':'gold','Northeast':'red','Midwest':'green'}

scatter = plt.scatter(
    x = novdf[xlabel], 
    y = novdf[ylabel], 
    s=novdf['Census2019_18PlusPop']/10000, # [MR] Plots bubble size based on population. Divided by 2000 to fit on plot area
    c=novdf['Recip_State'].map(colors), 
    cmap="Accent", 
    alpha=0.5, 
    edgecolors="white", 
    linewidth=2);
plt.title("% Pop 18+ vaccinated vs. Deaths Per 100,000 by Region (11.30.21)")
ax = plt.gcf().axes[0]
ax.set(xlabel=xlabel, ylabel=ylabel)
plt.ylim(0,500)
plt.xlim(0,)

#[MR] Creates fake line to use index for second legend
markers = [plt.Line2D([0,0],[0,0],color=color, marker='o', linestyle='') for color in regions.values()]
leg = plt.legend(markers, regions.keys(), numpoints=1, loc=(1.01,0), title="Region")
ax.add_artist(leg)

#[MR] Creates population legend
handles, labels = scatter.legend_elements(prop="sizes", alpha=0.4,fmt="{x}K")
plt.legend(handles, labels, loc=(1.01,0.3), title="Population", labelspacing=1.0, borderpad=1)

plt.show()
